COMMANDS:
ssh cc-project-group-54@192.168.0.10
raspivid -o ~/Project/Videos/test.h264 -t 500
ffmpeg -i ~/Project/Videos/test.h264 -r 25 ~/Project/Frames/image-%3d.jpeg
ffmpeg -i ~/Project/Videos/test.h264 ~/Project/Frames/image-%3d.jpeg
sudo rm Project/Frames/*

DOCKER COMMANDS:
--Build:
docker build -t hello-world .

--Run:
docker run --rm hello-world
docker run hello-world

Adding --rm deletes the container after it exits

--Listing containers/images:
docker images
docker ps

--Clean up:
docker system prune

--Testing lambda container images locally
docker run --rm -p 9000:8080 <name of the docker image already built>
docker run --rm -p 9000:8080 hello-world
Run test_http_calls.py after running the docker to test the invocation of the lambda function


Working with Lambda container images:
#Create the necessary policies and attach

https://docs.aws.amazon.com/lambda/latest/dg/images-create.html


Pushing Docker image to ECR repository:
Have the project folder and Dockerfile ready
Create ECR repository in AWS
Open the created repository -> View push commands
Execute those commands to push the docker image to the ECR repository

If there is an issue:
Add a new policy statement with principal:* and the following actions: (https://stackoverflow.com/questions/70828205/pushing-an-image-to-ecr-getting-retrying-in-seconds)
    "ecr:BatchGetImage",
    "ecr:BatchCheckLayerAvailability",
    "ecr:CompleteLayerUpload",
    "ecr:GetDownloadUrlForLayer",
    "ecr:InitiateLayerUpload",
    "ecr:PutImage",
    "ecr:UploadLayerPart"



PROJECT DEVELOPMENT NOTES:

Train the facial recognition model with our faces
Capture videos and store in S3 (I think every 0.5 seconds)
Get response from each video uploaded
Updating DynamoDB with our information (name, major, and year)
Lambda functions to perform facial recognition from video and return the result (query DynamoDB and return name, major, and year)
Docker container part

def capture_and_send_to_S3:
	Capture video of 0.5 seconds using Python Pi camera module
	Send that video to S3
	Once it is processed, get the result from ____? (asynchronous)
	Or, synchronously 


def recognize_face_and_fetch_details(face_image_file):
	...
	Call eval face recognition module and get result
	Extract the details of the recognized person from the DynamoDB
	Return the details (name, major, year)


def download_video_from_S3(bucket, key):
	.
	.
	return ..

def process video:
	Input: 0.5 second video (.h264 format)
	To do:
	Extract frames
	Take the last frame and call recognize_face_and_fetch_details function
	Return the details (name, major, year)

Issues:
entry.sh: line 6: syntax error near unexpected token `fi'
entry.sh: line 6: `fi'

Solution:
Check cat -e <filename> => This would show file endings
Change EOL format to Unix (It can be done using Notepad++)
Check cat -e <filename> to ensure no unusual file endings now

To do:
python slim image
Rectify awslambdarice module not found error

New docker command:

docker build -t my-container --build-arg AWS_DEFAULT_REGION="us-east-1" --build-arg AWS_ACCESS_KEY_ID="your_id" --build-arg AWS_SECRET_ACCESS_KEY="your_key" .

Steps to setup in AWS:
1. Push your container AWS ECR.
2. Create a Lambda function using the container image from ECR.
3. Increase Lambda execution timeout and Memory under Configuration settings.
4. Now create an API gateway(REST), add the above lambda function as trigger, enable lambda proxy integration, add Binary media type 'image/jpeg' under settings tab.
5. Deploy API.
6. Use the URL in post2.py.