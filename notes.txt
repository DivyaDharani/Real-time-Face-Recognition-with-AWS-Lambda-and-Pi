COMMANDS:
ssh cc-project-group-54@192.168.0.10
project54

raspivid -o ~/Project/Videos/test.h264 -t 500
ffmpeg -i ~/Project/Videos/test.h264 -r 25 ~/Project/Frames/image-%3d.jpeg
ffmpeg -i ~/Project/Videos/test.h264 ~/Project/Frames/image-%3d.jpeg
sudo rm Project/Frames/*

DOCKER COMMANDS:
--Build:
docker build -t hello-world .

--Run:
docker run --rm hello-world
docker run hello-world

Adding --rm deletes the container after it exits

--Listing containers/images:
docker images
docker ps

--Clean up:
docker system prune

--Testing lambda container images locally
docker run --rm -p 9000:8080 <name of the docker image already built>
docker run --rm -p 9000:8080 hello-world
Run test_http_calls.py after running the docker to test the invocation of the lambda function


Working with Lambda container images:
#Create the necessary policies and attach

https://docs.aws.amazon.com/lambda/latest/dg/images-create.html


Pushing Docker image to ECR repository:
Have the project folder and Dockerfile ready
Create ECR repository in AWS
Open the created repository -> View push commands
Execute those commands to push the docker image to the ECR repository

If there is an issue:
Add a new policy statement with principal:* and the following actions: (https://stackoverflow.com/questions/70828205/pushing-an-image-to-ecr-getting-retrying-in-seconds)
    "ecr:BatchGetImage",
    "ecr:BatchCheckLayerAvailability",
    "ecr:CompleteLayerUpload",
    "ecr:GetDownloadUrlForLayer",
    "ecr:InitiateLayerUpload",
    "ecr:PutImage",
    "ecr:UploadLayerPart"


Issues:
entry.sh: line 6: syntax error near unexpected token `fi'
entry.sh: line 6: `fi'

Solution:
Check cat -e <filename> => This would show file endings
Change EOL format to Unix (It can be done using Notepad++)
Check cat -e <filename> to ensure no unusual file endings now

New docker command:

docker build -t my-container --build-arg AWS_DEFAULT_REGION="us-east-1" --build-arg AWS_ACCESS_KEY_ID="your_id" --build-arg AWS_SECRET_ACCESS_KEY="your_key" .

Steps to setup in AWS:
1. Push your container to AWS ECR.
2. Create a Lambda function using the container image from ECR.
3. Increase Lambda execution timeout and Memory under Configuration settings.
4. Attach DynamoDb full access policy to lambda permissions.
5. Now create an API gateway(REST), add the above lambda function as trigger, enable lambda proxy integration, add Binary media type 'image/jpeg' under settings tab.
6. Deploy API.
6. Use the URL in http_post_aws_testing.py.